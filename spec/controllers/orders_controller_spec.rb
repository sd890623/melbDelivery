require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrdersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:shop) { FactoryGirl.create :shop }
  let(:category) { FactoryGirl.create :category, shop: shop }
  let(:item1) { create :item, shop: shop }
  let(:item2) { create :item, shop: shop }
  let(:order) { FactoryGirl.create :order, shop: shop }

  let(:cart) {
    [{
      item_id: item1.id,
      quantity: 2
    }, {
      item_id: item2.id,
      quantity: 1
    }]
  }
  let(:valid_attributes) {
    {
      phone: "MyString",
      address: "MyString",
      delivery_time: "MyString",
      delivery_method: "MyString",
      delivery_fee: 150.0,
      total_fee: 50.0
    }
  }

  let(:invalid_attributes) {
    {
      address: "MyString",
      delivery_time: "MyString",
      delivery_method: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrdersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all orders as @orders" do
      get :index, params: {shop_id: shop.id}, session: valid_session
      expect(assigns(:orders)).to eq([order])
    end
  end

  describe "GET #show" do
    it "assigns the requested order as @order" do
      get :show, params: {shop_id: shop.id, id: order.to_param}, session: valid_session
      expect(assigns(:order)).to eq(order)
    end
  end

  describe "GET #new" do
    it "assigns a new order as @order" do
      get :new, params: {shop_id: shop.id}, session: valid_session
      expect(assigns(:order)).to be_a_new(Order)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Order" do
        expect {
          post :create, params: {shop_id: shop.id, cart: cart, order: valid_attributes}, session: valid_session
        }.to change(Order, :count).by(1)
      end

      it "creates multiple orders_items" do
        expect {
          post :create, params: {shop_id: shop.id, cart: cart, order: valid_attributes}, session: valid_session
        }.to change(ItemsOrder, :count).by(2)
      end


      it "creates orders_items with correct quantity" do
        post :create, params: {shop_id: shop.id, cart: cart, order: valid_attributes}, session: valid_session
        expect(item1.items_orders.first.quantity).to eq 2
        expect(item2.items_orders.first.quantity).to eq 1
      end

      it "assigns a newly created order as @order" do
        post :create, params: {shop_id: shop.id, cart: cart, order: valid_attributes}, session: valid_session
        expect(assigns(:order)).to be_a(Order)
        expect(assigns(:order)).to be_persisted
      end

      it "redirects to the created order" do
        post :create, params: {shop_id: shop.id, cart: cart, order: valid_attributes}, session: valid_session
        expect(response).to redirect_to([shop, Order.last])
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved order as @order" do
        post :create, params: {shop_id: shop.id, order: invalid_attributes}, session: valid_session
        expect(assigns(:order)).to be_a_new(Order)
      end

      it "re-renders the 'new' template" do
        post :create, params: {shop_id: shop.id, order: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end
end
